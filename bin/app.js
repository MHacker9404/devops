#!/usr/bin/env node
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
require("source-map-support/register");
const cdk = require("@aws-cdk/core");
const vpc_stack_1 = require("../lib/vpc-stack");
const security_stack_1 = require("../lib/security-stack");
// import { MasterStack } from '../lib/master-stack';
const bastion_stack_1 = require("../lib/bastion-stack");
const kms_stack_1 = require("../lib/kms-stack");
const S3Stack_1 = require("../lib/S3Stack");
const rds_stack_1 = require("../lib/rds-stack");
const redis_stack_1 = require("../lib/redis-stack");
// import { Fn } from '@aws-cdk/core';
const cognito_stack_1 = require("../lib/AuthAuth/cognito-stack");
const api_gateway_stack_1 = require("../lib/AuthAuth/api-gateway-stack");
const lambda_stack_1 = require("../lib/AuthAuth/lambda-stack");
const back_end_1 = require("../lib/codepipeline/back-end");
const app = new cdk.App();
let vpc_stack = new vpc_stack_1.VpcStack(app, 'vpc');
let sec_stack = new security_stack_1.SecurityStack(app, 'security', { vpc: vpc_stack.vpc });
let bastion_stack = new bastion_stack_1.BastionStack(app, 'bastion', { vpc: vpc_stack.vpc, securityGroup: sec_stack.bastion_sg });
let kms_stack = new kms_stack_1.KmsStack(app, 'kms', {});
let s3_stack = new S3Stack_1.S3Stack(app, 's3');
let rds_stack = new rds_stack_1.RdsStack(app, 'rds', {
    vpc: vpc_stack.vpc,
    lambdaSG: sec_stack.lambda_sg,
    bastionSG: sec_stack.bastion_sg,
    kmsKey: kms_stack.kms_rds,
});
let redis_stack = new redis_stack_1.RedisStack(app, 'redis', { vpc: vpc_stack.vpc, redisSG: sec_stack.redis_sg });
// let redis_stack = new RedisStack(app, 'redis', { vpc: vpc_stack.vpc, redisSG: Fn.importValue('redis-sg-export') });
let cognito_stack = new cognito_stack_1.CognitoStack(app, 'cognito');
let api_gateway_stack = new api_gateway_stack_1.ApiGatewayStack(app, 'api-gateway');
let lambda_stack = new lambda_stack_1.LambdaStack(app, 'lambda');
let pipeline = new back_end_1.CpBackendStack(app, 'pipeline', {
    artifactBucket: s3_stack.artifactBucket,
});
/*
let master_stack = new MasterStack(app, 'MasterStack');
let vpc_stack = new VpcStack(master_stack, 'VpcStack');
let sec_stack = new SecurityStack(master_stack, 'SecurityStack', { vpc: vpc_stack.vpc });
*/
app.synth();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBwLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiYXBwLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUNBLHVDQUFxQztBQUNyQyxxQ0FBcUM7QUFDckMsZ0RBQTRDO0FBQzVDLDBEQUFzRDtBQUN0RCxxREFBcUQ7QUFDckQsd0RBQW9EO0FBQ3BELGdEQUE0QztBQUM1Qyw0Q0FBeUM7QUFDekMsZ0RBQTRDO0FBQzVDLG9EQUFnRDtBQUNoRCxzQ0FBc0M7QUFDdEMsaUVBQTZEO0FBQzdELHlFQUFvRTtBQUNwRSwrREFBMkQ7QUFDM0QsMkRBQThEO0FBRTlELE1BQU0sR0FBRyxHQUFHLElBQUksR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDO0FBQzFCLElBQUksU0FBUyxHQUFHLElBQUksb0JBQVEsQ0FBQyxHQUFHLEVBQUUsS0FBSyxDQUFDLENBQUM7QUFDekMsSUFBSSxTQUFTLEdBQUcsSUFBSSw4QkFBYSxDQUFDLEdBQUcsRUFBRSxVQUFVLEVBQUUsRUFBRSxHQUFHLEVBQUUsU0FBUyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUM7QUFDM0UsSUFBSSxhQUFhLEdBQUcsSUFBSSw0QkFBWSxDQUFDLEdBQUcsRUFBRSxTQUFTLEVBQUUsRUFBRSxHQUFHLEVBQUUsU0FBUyxDQUFDLEdBQUcsRUFBRSxhQUFhLEVBQUUsU0FBUyxDQUFDLFVBQVUsRUFBRSxDQUFDLENBQUM7QUFDbEgsSUFBSSxTQUFTLEdBQUcsSUFBSSxvQkFBUSxDQUFDLEdBQUcsRUFBRSxLQUFLLEVBQUUsRUFBRSxDQUFDLENBQUM7QUFDN0MsSUFBSSxRQUFRLEdBQUcsSUFBSSxpQkFBTyxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsQ0FBQztBQUN0QyxJQUFJLFNBQVMsR0FBRyxJQUFJLG9CQUFRLENBQUMsR0FBRyxFQUFFLEtBQUssRUFBRTtJQUNyQyxHQUFHLEVBQUUsU0FBUyxDQUFDLEdBQUc7SUFDbEIsUUFBUSxFQUFFLFNBQVMsQ0FBQyxTQUFTO0lBQzdCLFNBQVMsRUFBRSxTQUFTLENBQUMsVUFBVTtJQUMvQixNQUFNLEVBQUUsU0FBUyxDQUFDLE9BQU87Q0FDNUIsQ0FBQyxDQUFDO0FBQ0gsSUFBSSxXQUFXLEdBQUcsSUFBSSx3QkFBVSxDQUFDLEdBQUcsRUFBRSxPQUFPLEVBQUUsRUFBRSxHQUFHLEVBQUUsU0FBUyxDQUFDLEdBQUcsRUFBRSxPQUFPLEVBQUUsU0FBUyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7QUFDcEcsc0hBQXNIO0FBRXRILElBQUksYUFBYSxHQUFHLElBQUksNEJBQVksQ0FBQyxHQUFHLEVBQUUsU0FBUyxDQUFDLENBQUM7QUFDckQsSUFBSSxpQkFBaUIsR0FBRyxJQUFJLG1DQUFlLENBQUMsR0FBRyxFQUFFLGFBQWEsQ0FBQyxDQUFDO0FBQ2hFLElBQUksWUFBWSxHQUFHLElBQUksMEJBQVcsQ0FBQyxHQUFHLEVBQUUsUUFBUSxDQUFDLENBQUM7QUFFbEQsSUFBSSxRQUFRLEdBQUcsSUFBSSx5QkFBYyxDQUFDLEdBQUcsRUFBRSxVQUFVLEVBQUU7SUFDL0MsY0FBYyxFQUFFLFFBQVEsQ0FBQyxjQUFjO0NBQzFDLENBQUMsQ0FBQztBQUVIOzs7O0VBSUU7QUFFRixHQUFHLENBQUMsS0FBSyxFQUFFLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIjIS91c3IvYmluL2VudiBub2RlXHJcbmltcG9ydCAnc291cmNlLW1hcC1zdXBwb3J0L3JlZ2lzdGVyJztcclxuaW1wb3J0ICogYXMgY2RrIGZyb20gJ0Bhd3MtY2RrL2NvcmUnO1xyXG5pbXBvcnQgeyBWcGNTdGFjayB9IGZyb20gJy4uL2xpYi92cGMtc3RhY2snO1xyXG5pbXBvcnQgeyBTZWN1cml0eVN0YWNrIH0gZnJvbSAnLi4vbGliL3NlY3VyaXR5LXN0YWNrJztcclxuLy8gaW1wb3J0IHsgTWFzdGVyU3RhY2sgfSBmcm9tICcuLi9saWIvbWFzdGVyLXN0YWNrJztcclxuaW1wb3J0IHsgQmFzdGlvblN0YWNrIH0gZnJvbSAnLi4vbGliL2Jhc3Rpb24tc3RhY2snO1xyXG5pbXBvcnQgeyBLbXNTdGFjayB9IGZyb20gJy4uL2xpYi9rbXMtc3RhY2snO1xyXG5pbXBvcnQgeyBTM1N0YWNrIH0gZnJvbSAnLi4vbGliL1MzU3RhY2snO1xyXG5pbXBvcnQgeyBSZHNTdGFjayB9IGZyb20gJy4uL2xpYi9yZHMtc3RhY2snO1xyXG5pbXBvcnQgeyBSZWRpc1N0YWNrIH0gZnJvbSAnLi4vbGliL3JlZGlzLXN0YWNrJztcclxuLy8gaW1wb3J0IHsgRm4gfSBmcm9tICdAYXdzLWNkay9jb3JlJztcclxuaW1wb3J0IHsgQ29nbml0b1N0YWNrIH0gZnJvbSAnLi4vbGliL0F1dGhBdXRoL2NvZ25pdG8tc3RhY2snO1xyXG5pbXBvcnQgeyBBcGlHYXRld2F5U3RhY2sgfSBmcm9tICcuLi9saWIvQXV0aEF1dGgvYXBpLWdhdGV3YXktc3RhY2snO1xyXG5pbXBvcnQgeyBMYW1iZGFTdGFjayB9IGZyb20gJy4uL2xpYi9BdXRoQXV0aC9sYW1iZGEtc3RhY2snO1xyXG5pbXBvcnQgeyBDcEJhY2tlbmRTdGFjayB9IGZyb20gJy4uL2xpYi9jb2RlcGlwZWxpbmUvYmFjay1lbmQnO1xyXG5cclxuY29uc3QgYXBwID0gbmV3IGNkay5BcHAoKTtcclxubGV0IHZwY19zdGFjayA9IG5ldyBWcGNTdGFjayhhcHAsICd2cGMnKTtcclxubGV0IHNlY19zdGFjayA9IG5ldyBTZWN1cml0eVN0YWNrKGFwcCwgJ3NlY3VyaXR5JywgeyB2cGM6IHZwY19zdGFjay52cGMgfSk7XHJcbmxldCBiYXN0aW9uX3N0YWNrID0gbmV3IEJhc3Rpb25TdGFjayhhcHAsICdiYXN0aW9uJywgeyB2cGM6IHZwY19zdGFjay52cGMsIHNlY3VyaXR5R3JvdXA6IHNlY19zdGFjay5iYXN0aW9uX3NnIH0pO1xyXG5sZXQga21zX3N0YWNrID0gbmV3IEttc1N0YWNrKGFwcCwgJ2ttcycsIHt9KTtcclxubGV0IHMzX3N0YWNrID0gbmV3IFMzU3RhY2soYXBwLCAnczMnKTtcclxubGV0IHJkc19zdGFjayA9IG5ldyBSZHNTdGFjayhhcHAsICdyZHMnLCB7XHJcbiAgICB2cGM6IHZwY19zdGFjay52cGMsXHJcbiAgICBsYW1iZGFTRzogc2VjX3N0YWNrLmxhbWJkYV9zZyxcclxuICAgIGJhc3Rpb25TRzogc2VjX3N0YWNrLmJhc3Rpb25fc2csXHJcbiAgICBrbXNLZXk6IGttc19zdGFjay5rbXNfcmRzLFxyXG59KTtcclxubGV0IHJlZGlzX3N0YWNrID0gbmV3IFJlZGlzU3RhY2soYXBwLCAncmVkaXMnLCB7IHZwYzogdnBjX3N0YWNrLnZwYywgcmVkaXNTRzogc2VjX3N0YWNrLnJlZGlzX3NnIH0pO1xyXG4vLyBsZXQgcmVkaXNfc3RhY2sgPSBuZXcgUmVkaXNTdGFjayhhcHAsICdyZWRpcycsIHsgdnBjOiB2cGNfc3RhY2sudnBjLCByZWRpc1NHOiBGbi5pbXBvcnRWYWx1ZSgncmVkaXMtc2ctZXhwb3J0JykgfSk7XHJcblxyXG5sZXQgY29nbml0b19zdGFjayA9IG5ldyBDb2duaXRvU3RhY2soYXBwLCAnY29nbml0bycpO1xyXG5sZXQgYXBpX2dhdGV3YXlfc3RhY2sgPSBuZXcgQXBpR2F0ZXdheVN0YWNrKGFwcCwgJ2FwaS1nYXRld2F5Jyk7XHJcbmxldCBsYW1iZGFfc3RhY2sgPSBuZXcgTGFtYmRhU3RhY2soYXBwLCAnbGFtYmRhJyk7XHJcblxyXG5sZXQgcGlwZWxpbmUgPSBuZXcgQ3BCYWNrZW5kU3RhY2soYXBwLCAncGlwZWxpbmUnLCB7XHJcbiAgICBhcnRpZmFjdEJ1Y2tldDogczNfc3RhY2suYXJ0aWZhY3RCdWNrZXQsXHJcbn0pO1xyXG5cclxuLypcclxubGV0IG1hc3Rlcl9zdGFjayA9IG5ldyBNYXN0ZXJTdGFjayhhcHAsICdNYXN0ZXJTdGFjaycpO1xyXG5sZXQgdnBjX3N0YWNrID0gbmV3IFZwY1N0YWNrKG1hc3Rlcl9zdGFjaywgJ1ZwY1N0YWNrJyk7XHJcbmxldCBzZWNfc3RhY2sgPSBuZXcgU2VjdXJpdHlTdGFjayhtYXN0ZXJfc3RhY2ssICdTZWN1cml0eVN0YWNrJywgeyB2cGM6IHZwY19zdGFjay52cGMgfSk7XHJcbiovXHJcblxyXG5hcHAuc3ludGgoKTtcclxuIl19
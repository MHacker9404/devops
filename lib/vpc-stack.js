"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.VpcStack = void 0;
const cdk = require("@aws-cdk/core");
const aws_ec2_1 = require("@aws-cdk/aws-ec2");
const ssm = require("@aws-cdk/aws-ssm");
class VpcStack extends cdk.Stack {
    constructor(scope, id, props) {
        super(scope, id, props);
        this.privateSubnets = [];
        this.publicSubnets = [];
        // The code that defines your stack goes here
        const project_name = this.node.tryGetContext('project_name');
        const environment = this.node.tryGetContext('environment');
        this.vpc = new aws_ec2_1.Vpc(this, 'devVPC', {
            cidr: '172.32.0.0/16',
            maxAzs: 2,
            enableDnsHostnames: true,
            enableDnsSupport: true,
            subnetConfiguration: [
                {
                    name: 'Public',
                    cidrMask: 24,
                    subnetType: aws_ec2_1.SubnetType.PUBLIC,
                },
                {
                    name: 'Private',
                    cidrMask: 24,
                    subnetType: aws_ec2_1.SubnetType.PRIVATE,
                },
                {
                    name: 'Isolated',
                    cidrMask: 24,
                    subnetType: aws_ec2_1.SubnetType.ISOLATED,
                },
            ],
            natGateways: 1,
        });
        this.privateSubnets = this.vpc.privateSubnets.map((subnet) => subnet.subnetId);
        this.privateSubnets.forEach((subnet, index) => new ssm.StringParameter(this, `private-subnet-${index + 1}`, {
            stringValue: subnet,
            parameterName: `/${environment}/private-subnet-${index + 1}`,
            type: ssm.ParameterType.STRING,
        }));
        this.publicSubnets = this.vpc.publicSubnets.map((subnet) => subnet.subnetId);
        this.publicSubnets.forEach((subnet, index) => new ssm.StringParameter(this, `public-subnet-${index + 1}`, {
            stringValue: subnet,
            parameterName: `/${environment}/public-subnet-${index + 1}`,
            type: ssm.ParameterType.STRING,
        }));
    }
}
exports.VpcStack = VpcStack;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidnBjLXN0YWNrLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsidnBjLXN0YWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLHFDQUFxQztBQUNyQyw4Q0FBNEQ7QUFDNUQsd0NBQXdDO0FBRXhDLE1BQWEsUUFBUyxTQUFRLEdBQUcsQ0FBQyxLQUFLO0lBS25DLFlBQVksS0FBb0IsRUFBRSxFQUFVLEVBQUUsS0FBc0I7UUFDaEUsS0FBSyxDQUFDLEtBQUssRUFBRSxFQUFFLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFKckIsbUJBQWMsR0FBYSxFQUFFLENBQUM7UUFDOUIsa0JBQWEsR0FBYSxFQUFFLENBQUM7UUFLaEMsNkNBQTZDO1FBQzdDLE1BQU0sWUFBWSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLGNBQWMsQ0FBQyxDQUFDO1FBQzdELE1BQU0sV0FBVyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLGFBQWEsQ0FBQyxDQUFDO1FBRTNELElBQUksQ0FBQyxHQUFHLEdBQUcsSUFBSSxhQUFHLENBQUMsSUFBSSxFQUFFLFFBQVEsRUFBRTtZQUMvQixJQUFJLEVBQUUsZUFBZTtZQUNyQixNQUFNLEVBQUUsQ0FBQztZQUNULGtCQUFrQixFQUFFLElBQUk7WUFDeEIsZ0JBQWdCLEVBQUUsSUFBSTtZQUN0QixtQkFBbUIsRUFBRTtnQkFDakI7b0JBQ0ksSUFBSSxFQUFFLFFBQVE7b0JBQ2QsUUFBUSxFQUFFLEVBQUU7b0JBQ1osVUFBVSxFQUFFLG9CQUFVLENBQUMsTUFBTTtpQkFDaEM7Z0JBQ0Q7b0JBQ0ksSUFBSSxFQUFFLFNBQVM7b0JBQ2YsUUFBUSxFQUFFLEVBQUU7b0JBQ1osVUFBVSxFQUFFLG9CQUFVLENBQUMsT0FBTztpQkFDakM7Z0JBQ0Q7b0JBQ0ksSUFBSSxFQUFFLFVBQVU7b0JBQ2hCLFFBQVEsRUFBRSxFQUFFO29CQUNaLFVBQVUsRUFBRSxvQkFBVSxDQUFDLFFBQVE7aUJBQ2xDO2FBQ0o7WUFDRCxXQUFXLEVBQUUsQ0FBQztTQUNqQixDQUFDLENBQUM7UUFFSCxJQUFJLENBQUMsY0FBYyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsY0FBYyxDQUFDLEdBQUcsQ0FBQyxDQUFDLE1BQWUsRUFBRSxFQUFFLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQ3hGLElBQUksQ0FBQyxjQUFjLENBQUMsT0FBTyxDQUN2QixDQUFDLE1BQWMsRUFBRSxLQUFhLEVBQUUsRUFBRSxDQUM5QixJQUFJLEdBQUcsQ0FBQyxlQUFlLENBQUMsSUFBSSxFQUFFLGtCQUFrQixLQUFLLEdBQUcsQ0FBQyxFQUFFLEVBQUU7WUFDekQsV0FBVyxFQUFFLE1BQU07WUFDbkIsYUFBYSxFQUFFLElBQUksV0FBVyxtQkFBbUIsS0FBSyxHQUFHLENBQUMsRUFBRTtZQUM1RCxJQUFJLEVBQUUsR0FBRyxDQUFDLGFBQWEsQ0FBQyxNQUFNO1NBQ2pDLENBQUMsQ0FDVCxDQUFDO1FBRUYsSUFBSSxDQUFDLGFBQWEsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLGFBQWEsQ0FBQyxHQUFHLENBQUMsQ0FBQyxNQUFlLEVBQUUsRUFBRSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUN0RixJQUFJLENBQUMsYUFBYSxDQUFDLE9BQU8sQ0FDdEIsQ0FBQyxNQUFjLEVBQUUsS0FBYSxFQUFFLEVBQUUsQ0FDOUIsSUFBSSxHQUFHLENBQUMsZUFBZSxDQUFDLElBQUksRUFBRSxpQkFBaUIsS0FBSyxHQUFHLENBQUMsRUFBRSxFQUFFO1lBQ3hELFdBQVcsRUFBRSxNQUFNO1lBQ25CLGFBQWEsRUFBRSxJQUFJLFdBQVcsa0JBQWtCLEtBQUssR0FBRyxDQUFDLEVBQUU7WUFDM0QsSUFBSSxFQUFFLEdBQUcsQ0FBQyxhQUFhLENBQUMsTUFBTTtTQUNqQyxDQUFDLENBQ1QsQ0FBQztJQUNOLENBQUM7Q0FDSjtBQXpERCw0QkF5REMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBjZGsgZnJvbSAnQGF3cy1jZGsvY29yZSc7XHJcbmltcG9ydCB7IElTdWJuZXQsIFZwYywgU3VibmV0VHlwZSB9IGZyb20gJ0Bhd3MtY2RrL2F3cy1lYzInO1xyXG5pbXBvcnQgKiBhcyBzc20gZnJvbSAnQGF3cy1jZGsvYXdzLXNzbSc7XHJcblxyXG5leHBvcnQgY2xhc3MgVnBjU3RhY2sgZXh0ZW5kcyBjZGsuU3RhY2sge1xyXG4gICAgcHVibGljIHZwYzogVnBjO1xyXG4gICAgcHVibGljIHByaXZhdGVTdWJuZXRzOiBzdHJpbmdbXSA9IFtdO1xyXG4gICAgcHVibGljIHB1YmxpY1N1Ym5ldHM6IHN0cmluZ1tdID0gW107XHJcblxyXG4gICAgY29uc3RydWN0b3Ioc2NvcGU6IGNkay5Db25zdHJ1Y3QsIGlkOiBzdHJpbmcsIHByb3BzPzogY2RrLlN0YWNrUHJvcHMpIHtcclxuICAgICAgICBzdXBlcihzY29wZSwgaWQsIHByb3BzKTtcclxuXHJcbiAgICAgICAgLy8gVGhlIGNvZGUgdGhhdCBkZWZpbmVzIHlvdXIgc3RhY2sgZ29lcyBoZXJlXHJcbiAgICAgICAgY29uc3QgcHJvamVjdF9uYW1lID0gdGhpcy5ub2RlLnRyeUdldENvbnRleHQoJ3Byb2plY3RfbmFtZScpO1xyXG4gICAgICAgIGNvbnN0IGVudmlyb25tZW50ID0gdGhpcy5ub2RlLnRyeUdldENvbnRleHQoJ2Vudmlyb25tZW50Jyk7XHJcblxyXG4gICAgICAgIHRoaXMudnBjID0gbmV3IFZwYyh0aGlzLCAnZGV2VlBDJywge1xyXG4gICAgICAgICAgICBjaWRyOiAnMTcyLjMyLjAuMC8xNicsXHJcbiAgICAgICAgICAgIG1heEF6czogMixcclxuICAgICAgICAgICAgZW5hYmxlRG5zSG9zdG5hbWVzOiB0cnVlLCAvLyAgSW5kaWNhdGVzIHdoZXRoZXIgdGhlIGluc3RhbmNlcyBsYXVuY2hlZCBpbiB0aGUgVlBDIGdldCBwdWJsaWMgRE5TIGhvc3RuYW1lcy5cclxuICAgICAgICAgICAgZW5hYmxlRG5zU3VwcG9ydDogdHJ1ZSwgLy8gIEluZGljYXRlcyB3aGV0aGVyIHRoZSBETlMgcmVzb2x1dGlvbiBpcyBzdXBwb3J0ZWQgZm9yIHRoZSBWUEMuXHJcbiAgICAgICAgICAgIHN1Ym5ldENvbmZpZ3VyYXRpb246IFtcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBuYW1lOiAnUHVibGljJyxcclxuICAgICAgICAgICAgICAgICAgICBjaWRyTWFzazogMjQsXHJcbiAgICAgICAgICAgICAgICAgICAgc3VibmV0VHlwZTogU3VibmV0VHlwZS5QVUJMSUMsXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6ICdQcml2YXRlJyxcclxuICAgICAgICAgICAgICAgICAgICBjaWRyTWFzazogMjQsXHJcbiAgICAgICAgICAgICAgICAgICAgc3VibmV0VHlwZTogU3VibmV0VHlwZS5QUklWQVRFLFxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBuYW1lOiAnSXNvbGF0ZWQnLFxyXG4gICAgICAgICAgICAgICAgICAgIGNpZHJNYXNrOiAyNCxcclxuICAgICAgICAgICAgICAgICAgICBzdWJuZXRUeXBlOiBTdWJuZXRUeXBlLklTT0xBVEVELFxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgXSxcclxuICAgICAgICAgICAgbmF0R2F0ZXdheXM6IDEsXHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHRoaXMucHJpdmF0ZVN1Ym5ldHMgPSB0aGlzLnZwYy5wcml2YXRlU3VibmV0cy5tYXAoKHN1Ym5ldDogSVN1Ym5ldCkgPT4gc3VibmV0LnN1Ym5ldElkKTtcclxuICAgICAgICB0aGlzLnByaXZhdGVTdWJuZXRzLmZvckVhY2goXHJcbiAgICAgICAgICAgIChzdWJuZXQ6IHN0cmluZywgaW5kZXg6IG51bWJlcikgPT5cclxuICAgICAgICAgICAgICAgIG5ldyBzc20uU3RyaW5nUGFyYW1ldGVyKHRoaXMsIGBwcml2YXRlLXN1Ym5ldC0ke2luZGV4ICsgMX1gLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgc3RyaW5nVmFsdWU6IHN1Ym5ldCxcclxuICAgICAgICAgICAgICAgICAgICBwYXJhbWV0ZXJOYW1lOiBgLyR7ZW52aXJvbm1lbnR9L3ByaXZhdGUtc3VibmV0LSR7aW5kZXggKyAxfWAsXHJcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogc3NtLlBhcmFtZXRlclR5cGUuU1RSSU5HLFxyXG4gICAgICAgICAgICAgICAgfSksXHJcbiAgICAgICAgKTtcclxuXHJcbiAgICAgICAgdGhpcy5wdWJsaWNTdWJuZXRzID0gdGhpcy52cGMucHVibGljU3VibmV0cy5tYXAoKHN1Ym5ldDogSVN1Ym5ldCkgPT4gc3VibmV0LnN1Ym5ldElkKTtcclxuICAgICAgICB0aGlzLnB1YmxpY1N1Ym5ldHMuZm9yRWFjaChcclxuICAgICAgICAgICAgKHN1Ym5ldDogc3RyaW5nLCBpbmRleDogbnVtYmVyKSA9PlxyXG4gICAgICAgICAgICAgICAgbmV3IHNzbS5TdHJpbmdQYXJhbWV0ZXIodGhpcywgYHB1YmxpYy1zdWJuZXQtJHtpbmRleCArIDF9YCwge1xyXG4gICAgICAgICAgICAgICAgICAgIHN0cmluZ1ZhbHVlOiBzdWJuZXQsXHJcbiAgICAgICAgICAgICAgICAgICAgcGFyYW1ldGVyTmFtZTogYC8ke2Vudmlyb25tZW50fS9wdWJsaWMtc3VibmV0LSR7aW5kZXggKyAxfWAsXHJcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogc3NtLlBhcmFtZXRlclR5cGUuU1RSSU5HLFxyXG4gICAgICAgICAgICAgICAgfSksXHJcbiAgICAgICAgKTtcclxuICAgIH1cclxufVxyXG4iXX0=
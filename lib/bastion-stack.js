"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BastionStack = void 0;
const cdk = require("@aws-cdk/core");
const aws_ec2_1 = require("@aws-cdk/aws-ec2");
class BastionStack extends cdk.Stack {
    constructor(scope, id, props) {
        super(scope, id, props);
        // The code that defines your stack goes here
        const project_name = this.node.tryGetContext('project_name');
        const environment = this.node.tryGetContext('environment');
        this.host = new aws_ec2_1.Instance(this, 'bastion-host', {
            // instanceType: InstanceType.of(InstanceClass.T2, InstanceSize.MICRO),
            instanceType: new aws_ec2_1.InstanceType('t2.micro'),
            machineImage: new aws_ec2_1.AmazonLinuxImage({
                edition: aws_ec2_1.AmazonLinuxEdition.STANDARD,
                generation: aws_ec2_1.AmazonLinuxGeneration.AMAZON_LINUX_2,
                virtualization: aws_ec2_1.AmazonLinuxVirt.HVM,
                storage: aws_ec2_1.AmazonLinuxStorage.GENERAL_PURPOSE,
            }),
            vpc: props.vpc,
            keyName: 'prb-cdk-devops',
            vpcSubnets: { subnetType: aws_ec2_1.SubnetType.PUBLIC },
            securityGroup: props.securityGroup,
        });
    }
}
exports.BastionStack = BastionStack;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFzdGlvbi1zdGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImJhc3Rpb24tc3RhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEscUNBQXFDO0FBQ3JDLDhDQWEwQjtBQU8xQixNQUFhLFlBQWEsU0FBUSxHQUFHLENBQUMsS0FBSztJQUd2QyxZQUFZLEtBQW9CLEVBQUUsRUFBVSxFQUFFLEtBQXdCO1FBQ2xFLEtBQUssQ0FBQyxLQUFLLEVBQUUsRUFBRSxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBRXhCLDZDQUE2QztRQUM3QyxNQUFNLFlBQVksR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxjQUFjLENBQUMsQ0FBQztRQUM3RCxNQUFNLFdBQVcsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxhQUFhLENBQUMsQ0FBQztRQUUzRCxJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksa0JBQVEsQ0FBQyxJQUFJLEVBQUUsY0FBYyxFQUFFO1lBQzNDLHVFQUF1RTtZQUN2RSxZQUFZLEVBQUUsSUFBSSxzQkFBWSxDQUFDLFVBQVUsQ0FBQztZQUMxQyxZQUFZLEVBQUUsSUFBSSwwQkFBZ0IsQ0FBQztnQkFDL0IsT0FBTyxFQUFFLDRCQUFrQixDQUFDLFFBQVE7Z0JBQ3BDLFVBQVUsRUFBRSwrQkFBcUIsQ0FBQyxjQUFjO2dCQUNoRCxjQUFjLEVBQUUseUJBQWUsQ0FBQyxHQUFHO2dCQUNuQyxPQUFPLEVBQUUsNEJBQWtCLENBQUMsZUFBZTthQUM5QyxDQUFDO1lBQ0YsR0FBRyxFQUFFLEtBQUssQ0FBQyxHQUFHO1lBQ2QsT0FBTyxFQUFFLGdCQUFnQjtZQUN6QixVQUFVLEVBQUUsRUFBRSxVQUFVLEVBQUUsb0JBQVUsQ0FBQyxNQUFNLEVBQUU7WUFDN0MsYUFBYSxFQUFFLEtBQUssQ0FBQyxhQUFhO1NBQ3JDLENBQUMsQ0FBQztJQUNQLENBQUM7Q0FDSjtBQXpCRCxvQ0F5QkMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBjZGsgZnJvbSAnQGF3cy1jZGsvY29yZSc7XHJcbmltcG9ydCB7XHJcbiAgICBJVnBjLFxyXG4gICAgSVNlY3VyaXR5R3JvdXAsXHJcbiAgICBJbnN0YW5jZSxcclxuICAgIEluc3RhbmNlVHlwZSxcclxuICAgIEluc3RhbmNlQ2xhc3MsXHJcbiAgICBJbnN0YW5jZVNpemUsXHJcbiAgICBBbWF6b25MaW51eEltYWdlLFxyXG4gICAgQW1hem9uTGludXhFZGl0aW9uLFxyXG4gICAgQW1hem9uTGludXhHZW5lcmF0aW9uLFxyXG4gICAgQW1hem9uTGludXhWaXJ0LFxyXG4gICAgQW1hem9uTGludXhTdG9yYWdlLFxyXG4gICAgU3VibmV0VHlwZSxcclxufSBmcm9tICdAYXdzLWNkay9hd3MtZWMyJztcclxuXHJcbmludGVyZmFjZSBCYXN0aW9uU3RhY2tQcm9wcyBleHRlbmRzIGNkay5TdGFja1Byb3BzIHtcclxuICAgIHZwYzogSVZwYztcclxuICAgIHNlY3VyaXR5R3JvdXA6IElTZWN1cml0eUdyb3VwO1xyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgQmFzdGlvblN0YWNrIGV4dGVuZHMgY2RrLlN0YWNrIHtcclxuICAgIHByaXZhdGUgaG9zdDogSW5zdGFuY2U7XHJcblxyXG4gICAgY29uc3RydWN0b3Ioc2NvcGU6IGNkay5Db25zdHJ1Y3QsIGlkOiBzdHJpbmcsIHByb3BzOiBCYXN0aW9uU3RhY2tQcm9wcykge1xyXG4gICAgICAgIHN1cGVyKHNjb3BlLCBpZCwgcHJvcHMpO1xyXG5cclxuICAgICAgICAvLyBUaGUgY29kZSB0aGF0IGRlZmluZXMgeW91ciBzdGFjayBnb2VzIGhlcmVcclxuICAgICAgICBjb25zdCBwcm9qZWN0X25hbWUgPSB0aGlzLm5vZGUudHJ5R2V0Q29udGV4dCgncHJvamVjdF9uYW1lJyk7XHJcbiAgICAgICAgY29uc3QgZW52aXJvbm1lbnQgPSB0aGlzLm5vZGUudHJ5R2V0Q29udGV4dCgnZW52aXJvbm1lbnQnKTtcclxuXHJcbiAgICAgICAgdGhpcy5ob3N0ID0gbmV3IEluc3RhbmNlKHRoaXMsICdiYXN0aW9uLWhvc3QnLCB7XHJcbiAgICAgICAgICAgIC8vIGluc3RhbmNlVHlwZTogSW5zdGFuY2VUeXBlLm9mKEluc3RhbmNlQ2xhc3MuVDIsIEluc3RhbmNlU2l6ZS5NSUNSTyksXHJcbiAgICAgICAgICAgIGluc3RhbmNlVHlwZTogbmV3IEluc3RhbmNlVHlwZSgndDIubWljcm8nKSxcclxuICAgICAgICAgICAgbWFjaGluZUltYWdlOiBuZXcgQW1hem9uTGludXhJbWFnZSh7XHJcbiAgICAgICAgICAgICAgICBlZGl0aW9uOiBBbWF6b25MaW51eEVkaXRpb24uU1RBTkRBUkQsXHJcbiAgICAgICAgICAgICAgICBnZW5lcmF0aW9uOiBBbWF6b25MaW51eEdlbmVyYXRpb24uQU1BWk9OX0xJTlVYXzIsXHJcbiAgICAgICAgICAgICAgICB2aXJ0dWFsaXphdGlvbjogQW1hem9uTGludXhWaXJ0LkhWTSxcclxuICAgICAgICAgICAgICAgIHN0b3JhZ2U6IEFtYXpvbkxpbnV4U3RvcmFnZS5HRU5FUkFMX1BVUlBPU0UsXHJcbiAgICAgICAgICAgIH0pLFxyXG4gICAgICAgICAgICB2cGM6IHByb3BzLnZwYyxcclxuICAgICAgICAgICAga2V5TmFtZTogJ3ByYi1jZGstZGV2b3BzJyxcclxuICAgICAgICAgICAgdnBjU3VibmV0czogeyBzdWJuZXRUeXBlOiBTdWJuZXRUeXBlLlBVQkxJQyB9LFxyXG4gICAgICAgICAgICBzZWN1cml0eUdyb3VwOiBwcm9wcy5zZWN1cml0eUdyb3VwLFxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG59XHJcbiJdfQ==